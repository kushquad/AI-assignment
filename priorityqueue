class priorityqueue:

    data = []
    heapsize = 0

    def parent(self,i):
        return (i-1)/2
    def left(self,i):
        return 2*i+1
    def right(self,i):
        return 2*i+2
    
    def front(self):
        return self.data[0]
    def comparator(self,a,b):
        return a<b

    def makepriorityqueue(self,i):
        l = self.left(i)
        r = self.right(i)
        smallest = i
        if(l<self.heapsize and self.comparator(self.data[l],self.data[i])):
            smallest = l
        if(r<self.heapsize and self.comparator(self.data[r],self.data[smallest])):
            smallest = r
        if(not smallest==i):
            self.data[i],self.data[smallest] = self.data[smallest],self.data[i]
            self.makepriorityqueue(smallest)
            
    def __init__(self):
        self.data = []
        self.heapsize = 0
        
    def enqueue(self,ele):
        i = self.heapsize
        self.heapsize+=1
        self.data.append(ele)
        while(i!=0 and self.comparator(self.data[i],self.data[self.parent(i)])):
            self.data[i], self.data[self.parent(i)] = self.data[self.parent(i)], self.data[i]
            i = self.parent(i)
            
    def dequeue(self):
        if(self.heapsize<=0):
            return None
        else:
            val = self.data[0]
            self.data[0] = self.data[self.heapsize-1]
            self.data.pop()
            self.heapsize-=1
            self.makepriorityqueue(0)
            return val

## Tests
        
##pq = priorityqueue()
##
##pq.enqueue(5)
##pq.enqueue(1)
##pq.enqueue(2)
##pq.enqueue(7)
##pq.enqueue(8)
##pq.enqueue(9)
##pq.enqueue(3)
##
##print pq.data
##
##print pq.front()
##pq.dequeue()
##print pq.data
